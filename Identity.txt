protected override void OnModelCreating(ModelBuilder modelBuilder)
{
    base.OnModelCreating(modelBuilder);

    // Override default AspNet Identity table names
    modelBuilder.Entity<User>(entity => { entity.ToTable(name: "Users"); });
    modelBuilder.Entity<IdentityRole>(entity => { entity.ToTable(name: "Roles"); });
    modelBuilder.Entity<IdentityUserRole<string>>(entity => { entity.ToTable("UserRoles"); });
    modelBuilder.Entity<IdentityUserClaim<string>>(entity => { entity.ToTable("UserClaims"); });
    modelBuilder.Entity<IdentityUserLogin<string>>(entity => { entity.ToTable("UserLogins"); });
    modelBuilder.Entity<IdentityUserToken<string>>(entity => { entity.ToTable("UserTokens"); });
    modelBuilder.Entity<IdentityRoleClaim<string>>(entity => { entity.ToTable("RoleClaims"); });
}






===============

    foreach (var entityType in modelBuilder.Model.GetEntityTypes())
         {
            var table = entityType.Relational().TableName;
             if (table.StartsWith("AspNet"))
             {
                 entityType.Relational().TableName = table.Substring(6);
             }
         };
But this it's not longger support on netcore > 2.2, so, I need to fix it and this is the functional way on NetCore > 2.2

        foreach (var entityType in modelBuilder.Model.GetEntityTypes())
        {
            var tableName = entityType.GetTableName();
            if (tableName.StartsWith("AspNet"))
            {
                entityType.SetTableName(tableName.Substring(6));
            }
        }


===========================================================
PM> Scaffold-DbContext "Server=LAPTOP-DU3M7H5R\SPARTA;Database=InventoryDB;Trusted_Connection=True;" Microsoft.EntityFrameworkCore.SqlServer -OutputDir DAL(where model generate) -Context MyDbContext(Name) -DataAnnotations 

@section Scripts{
}

<partial name="nameof partial view" model="@Modelorlist/>
1. Single page with two form collect by IFormCollection====>not strongly typed model
2. Two form in two partial view wth strongly type view---> call the static partial view <partial name="" />
3. Dynamic partial view====>call the dynamic partial view <partial name="" model="@Model or x in loop" />